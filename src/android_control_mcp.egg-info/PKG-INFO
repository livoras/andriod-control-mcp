Metadata-Version: 2.4
Name: android-control-mcp
Version: 0.1.0
Summary: MCP server for Android device control with screen analysis
Author-email: livoras <livoras@github.com>
License: MIT
Project-URL: Homepage, https://github.com/livoras/andriod-control-mcp
Project-URL: Repository, https://github.com/livoras/andriod-control-mcp
Project-URL: Issues, https://github.com/livoras/andriod-control-mcp/issues
Keywords: mcp,android,automation,uiautomator2,ai
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: Testing
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: mcp>=1.0.0
Requires-Dist: uiautomator2>=2.16.0
Requires-Dist: Pillow>=9.0.0
Requires-Dist: requests>=2.25.0
Requires-Dist: flask>=2.0.0

# Android Control MCP

MCP (Model Context Protocol) server for Android device control with AI-powered screen analysis.

## Features

- üì± **Screen Analysis**: Capture and analyze Android screen with element detection
- üéØ **Smart Clicking**: Auto-calculate click points for interactive elements
- üîÑ **Full Control**: Support click, swipe, input text, navigation operations
- üñºÔ∏è **Visual Feedback**: Return screenshots and analysis for all operations
- ü§ñ **AI Integration**: Works with OmniParser for intelligent UI understanding

## Installation

```bash
# Install from PyPI
pip install android-control-mcp

# Or use uvx to run directly
uvx android-control-mcp
```

## Usage

### As MCP Server

Add to your MCP configuration:

```json
{
  "mcpServers": {
    "android-control": {
      "command": "uvx",
      "args": ["android-control-mcp"]
    }
  }
}
```

Or if installed locally:

```json
{
  "mcpServers": {
    "android-control": {
      "command": "python",
      "args": ["-m", "android_control_mcp"]
    }
  }
}
```

### Available Tools

- `android_get_screen_info` - Get current screen information with element detection
- `android_click(x, y)` - Click at specified coordinates
- `android_swipe(direction)` - Swipe in direction (up/down/left/right)
- `android_input_text(text)` - Input text at current focus
- `android_back()` - Press back button
- `android_home()` - Go to home screen
- `android_long_click(x, y)` - Long press at coordinates
- `android_double_click(x, y)` - Double click at coordinates

## Requirements

- Python 3.8+
- Android device with USB debugging enabled
- uiautomator2
- OmniParser for screen analysis

## Setup

1. Enable USB debugging on your Android device
2. Connect device via USB
3. Install and run the MCP server
4. Use with your MCP-compatible AI assistant

## Development

```bash
# Clone the repository
git clone https://github.com/livoras/andriod-control-mcp.git
cd andriod-control-mcp

# Install in development mode
pip install -e .

# Run directly
python -m android_control_mcp
```

## License

MIT

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## Issues

If you encounter any problems, please [file an issue](https://github.com/livoras/andriod-control-mcp/issues) on GitHub.
